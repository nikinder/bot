import os
import io
import logging
import google.generativeai as genai
from datetime import datetime
from PIL import Image
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

if not GEMINI_API_KEY:
    logger.error("GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("‚ùå GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_API_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

def get_user_data(user_id: int):
    if user_id not in user_data:
        user_data[user_id] = {
            'requests_today': 0,
            'last_request_date': None,
            'subscription_active': False
        }
    return user_data[user_id]

def can_make_request(user_id: int):
    user = get_user_data(user_id)
    today = datetime.now().date()
    
    if user['last_request_date'] != today:
        user['requests_today'] = 0
        user['last_request_date'] = today
    
    if user['subscription_active']:
        return True, ""
    
    if user['requests_today'] < 3:
        return True, ""
    else:
        return False, """‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (3/3)

üíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!"""

async def analyze_with_gemini(image_data: bytes) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Gemini API"""
    try:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(io.BytesIO(image_data))
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        models_to_try = [
            'gemini-1.0-pro-vision',
            'gemini-pro-vision',
            'gemini-1.5-flash',
            'gemini-1.0-pro'
        ]
        
        for model_name in models_to_try:
            try:
                model = genai.GenerativeModel(model_name)
                
                prompt = """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –¥–∞–π —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏.

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
üçΩ **–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:** [–Ω–∞–∑–≤–∞–Ω–∏–µ]

üìä **–û–ë–©–ê–Ø –ö–ê–õ–û–†–ò–ô–ù–û–°–¢–¨:** ~X –∫–∫–∞–ª

üçé **–ü–ò–¢–ê–¢–ï–õ–¨–ù–´–ô –°–û–°–¢–ê–í:**
‚Ä¢ –ë–µ–ª–∫–∏: X –≥
‚Ä¢ –ñ–∏—Ä—ã: X –≥  
‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: X –≥

üìù **–°–û–°–¢–ê–í –ë–õ–Æ–î–ê:**
- [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1]
- [–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2]

üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:** [—Å–æ–≤–µ—Ç—ã]"""
                
                logger.info(f"–ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
                response = model.generate_content([prompt, image])
                
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ {model_name}")
                return response.text
                
            except Exception as e:
                logger.warning(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
        return "‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ billing."
            
    except Exception as e:
        logger.error(f"Error in analyze_with_gemini: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ Gemini API: {str(e)}"

async def handle_photo(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    can_request, message = can_make_request(user.id)
    if not can_request:
        keyboard = [
            [InlineKeyboardButton("üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
    processing_msg = await update.message.reply_text(
        "üîç *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...*\n\n"
        "–û–ø—Ä–µ–¥–µ–ª—è—é –±–ª—é–¥–æ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –∫–∞–ª–æ—Ä–∏–∏... ‚è≥", 
        parse_mode='Markdown'
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        image_data = await photo_file.download_as_bytearray()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        analysis_result = await analyze_with_gemini(bytes(image_data))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        user_data_obj = get_user_data(user.id)
        user_data_obj['requests_today'] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
        requests_info = f"\n\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_data_obj['requests_today']}/3"
        if user_data_obj['requests_today'] >= 3 and not user_data_obj['subscription_active']:
            requests_info += "\n‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω - –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        
        full_response = analysis_result + requests_info
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(full_response) > 4000:
            full_response = full_response[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        await update.message.reply_text(full_response)
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        try:
            await processing_msg.delete()
        except:
            pass
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    welcome_text = f"""
‚ú® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CalorieAI!** ‚ú®

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üéâ

–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º! üì∏ü§ñ

**üéØ –ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –¢–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±–ª—é–¥ –ø–æ —Ñ–æ—Ç–æ
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã)
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

**üìä –¢–∞—Ä–∏—Ñ—ã:**
‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—É—Ç–∫–∏
‚Ä¢ üíé –ü—Ä–µ–º–∏—É–º: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏ —è –≤—Å—ë –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é! üì∏
    """
    
    keyboard = [
        [InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="analyze")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def stats(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    user_info = get_user_data(user.id)
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}
üìÖ –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {user_info['requests_today']}/3
üíé –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if user_info['subscription_active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}

{'üéâ –£ –≤–∞—Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!' if user_info['subscription_active'] else 'üíé –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!'}
    """
    
    keyboard = []
    if not user_info['subscription_active']:
        keyboard.append([InlineKeyboardButton("üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")])
    keyboard.append([InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="analyze")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == "subscribe":
        await subscribe_info(query)
    elif query.data == "stats":
        await stats(update, context)
    elif query.data == "analyze":
        await query.edit_message_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ª–æ—Ä–∏–π!\n\n"
            "–°–æ–≤–µ—Ç: —Å–¥–µ–ª–∞–π—Ç–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
        )

async def subscribe_info(query):
    subscribe_text = """
üíé **–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞**

–ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏–∑—É –∫–∞–ª–æ—Ä–∏–π!

**üéÅ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤
‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

**üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å:** 299‚ÇΩ/–º–µ—Å—è—Ü

‚ö†Ô∏è *–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.*
    """
    
    keyboard = [
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ", callback_data="analyze")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(subscribe_text, reply_markup=reply_markup, parse_mode='Markdown')

async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**

**üì∏ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –≤ —á–∞—Ç
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∞ (10-30 —Å–µ–∫—É–Ω–¥)
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –ë–ñ–£

**üéØ –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:**
‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –†–∞—Å–ø–æ–ª–∞–≥–∞–π—Ç–µ –µ–¥—É –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–∞–∑–º—ã—Ç—ã—Ö —Ñ–æ—Ç–æ
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã

**üìä –õ–∏–º–∏—Ç—ã:**
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—É—Ç–∫–∏
‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å Google Gemini API!")
    print("=" * 50)
    print("ü§ñ CalorieAI Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üìç –•–æ—Å—Ç–∏–Ω–≥: Railway")
    print("üß† AI: Google Gemini")
    print("‚úÖ –¢–æ–∫–µ–Ω: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
    print("üîë Gemini API: –ù–∞—Å—Ç—Ä–æ–µ–Ω")
    print("üìß –ö–æ–º–∞–Ω–¥—ã: /start, /stats, /help")
    print("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    print("=" * 50)
    
    application.run_polling()

if __name__ == "__main__":
    main()


